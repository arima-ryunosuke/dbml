@@ -1,12 +1,19 @@
 <?php
+//@formatter:off
+/**
+ * @see \Doctrine\DBAL\Driver\Mysqli\Result
+ * @copyright 2006 Doctrine Project
+ * @link https://raw.githubusercontent.com/doctrine/dbal/master/LICENSE
+ */
 
 declare(strict_types=1);
 
-namespace Doctrine\DBAL\Driver\Mysqli;
+namespace ryunosuke\dbal\Driver\Mysqli;
 
 use Doctrine\DBAL\Driver\Exception;
 use Doctrine\DBAL\Driver\FetchUtils;
 use Doctrine\DBAL\Driver\Mysqli\Exception\StatementError;
+use Doctrine\DBAL\Driver\Mysqli\Statement;
 use Doctrine\DBAL\Driver\Result as ResultInterface;
 use mysqli_sql_exception;
 use mysqli_stmt;
@@ -16,9 +23,9 @@
 use function array_fill;
 use function count;
 
-final class Result implements ResultInterface
+class Result implements ResultInterface
 {
-    private mysqli_stmt $statement;
+    protected mysqli_stmt $statement;
 
     /**
      * Maintains a reference to the Statement that generated this result. This ensures that the lifetime of the
@@ -55,7 +62,7 @@
         mysqli_stmt $statement,
         ?Statement $statementReference = null
     ) {
-        $this->statement          = $statement;
+        $this->statement = $statement;
         $this->statementReference = $statementReference;
 
         $meta = $statement->result_metadata();
@@ -73,7 +80,7 @@
         // Store result of every execution which has it. Otherwise it will be impossible
         // to execute a new statement in case if the previous one has non-fetched rows
         // @link http://dev.mysql.com/doc/refman/5.7/en/commands-out-of-sync.html
-        $this->statement->store_result();
+        //$this->statement->store_result();
 
         // Bind row values _after_ storing the result. Otherwise, if mysqli is compiled with libmysql,
         // it will have to allocate as much memory as it may be needed for the given column type
