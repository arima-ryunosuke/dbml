<?php

namespace ryunosuke\Test\dbml\Annotation;

// this code auto generated.

// @formatter:off

trait TableGatewayProvider
{
    /** @var aggregateTableGateway */
    public $aggregate;

    /** @var autoTableGateway */
    public $auto;

    /** @var foreign_c1TableGateway */
    public $foreign_c1;

    /** @var foreign_c2TableGateway */
    public $foreign_c2;

    /** @var foreign_c3TableGateway */
    public $foreign_c3;

    /** @var foreign_d1TableGateway */
    public $foreign_d1;

    /** @var foreign_d2TableGateway */
    public $foreign_d2;

    /** @var foreign_pTableGateway */
    public $foreign_p;

    /** @var foreign_sTableGateway */
    public $foreign_s;

    /** @var foreign_scTableGateway */
    public $foreign_sc;

    /** @var g_ancestorTableGateway */
    public $g_ancestor;

    /** @var g_childTableGateway */
    public $g_child;

    /** @var g_grand1TableGateway */
    public $g_grand1;

    /** @var g_grand2TableGateway */
    public $g_grand2;

    /** @var g_parentTableGateway */
    public $g_parent;

    /** @var heavyTableGateway */
    public $heavy;

    /** @var horizontal1TableGateway */
    public $horizontal1;

    /** @var horizontal2TableGateway */
    public $horizontal2;

    /** @var master_tableTableGateway */
    public $master_table;

    /** @var misctypeTableGateway */
    public $misctype;

    /** @var misctype_childTableGateway */
    public $misctype_child;

    /** @var multicolumnTableGateway */
    public $multicolumn;

    /** @var multifkeyTableGateway */
    public $multifkey;

    /** @var multifkey2TableGateway */
    public $multifkey2;

    /** @var multiprimaryTableGateway */
    public $multiprimary;

    /** @var multiuniqueTableGateway */
    public $multiunique;

    /** @var noautoTableGateway */
    public $noauto;

    /** @var noprimaryTableGateway */
    public $noprimary;

    /** @var notnullsTableGateway */
    public $notnulls;

    /** @var nullableTableGateway */
    public $nullable;

    /** @var oprlogTableGateway */
    public $oprlog;

    /** @var pagingTableGateway */
    public $paging;

    /** @var ArticleTableGateway */
    public $t_article;

    /** @var ArticleTableGateway */
    public $Article;

    /** @var ManagedArticleTableGateway */
    public $ManagedArticle;

    /** @var CommentTableGateway */
    public $t_comment;

    /** @var CommentTableGateway */
    public $Comment;

    /** @var ManagedCommentTableGateway */
    public $ManagedComment;

    /** @var testTableGateway */
    public $test;

    /** @var test1TableGateway */
    public $test1;

    /** @var test2TableGateway */
    public $test2;

    /** @var tran_table1TableGateway */
    public $tran_table1;

    /** @var tran_table2TableGateway */
    public $tran_table2;

    /** @var tran_table3TableGateway */
    public $tran_table3;

    /** @var v_articleTableGateway */
    public $v_article;

    /** @return aggregateTableGateway */
    public function aggregate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return autoTableGateway */
    public function auto($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_c1TableGateway */
    public function foreign_c1($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_c2TableGateway */
    public function foreign_c2($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_c3TableGateway */
    public function foreign_c3($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_d1TableGateway */
    public function foreign_d1($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_d2TableGateway */
    public function foreign_d2($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_pTableGateway */
    public function foreign_p($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_sTableGateway */
    public function foreign_s($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return foreign_scTableGateway */
    public function foreign_sc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return g_ancestorTableGateway */
    public function g_ancestor($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return g_childTableGateway */
    public function g_child($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return g_grand1TableGateway */
    public function g_grand1($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return g_grand2TableGateway */
    public function g_grand2($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return g_parentTableGateway */
    public function g_parent($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return heavyTableGateway */
    public function heavy($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return horizontal1TableGateway */
    public function horizontal1($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return horizontal2TableGateway */
    public function horizontal2($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return master_tableTableGateway */
    public function master_table($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return misctypeTableGateway */
    public function misctype($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return misctype_childTableGateway */
    public function misctype_child($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return multicolumnTableGateway */
    public function multicolumn($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return multifkeyTableGateway */
    public function multifkey($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return multifkey2TableGateway */
    public function multifkey2($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return multiprimaryTableGateway */
    public function multiprimary($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return multiuniqueTableGateway */
    public function multiunique($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return noautoTableGateway */
    public function noauto($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return noprimaryTableGateway */
    public function noprimary($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return notnullsTableGateway */
    public function notnulls($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return nullableTableGateway */
    public function nullable($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return oprlogTableGateway */
    public function oprlog($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return pagingTableGateway */
    public function paging($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return ArticleTableGateway */
    public function t_article($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return ArticleTableGateway */
    public function Article($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return ManagedArticleTableGateway */
    public function ManagedArticle($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return CommentTableGateway */
    public function t_comment($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return CommentTableGateway */
    public function Comment($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return ManagedCommentTableGateway */
    public function ManagedComment($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return testTableGateway */
    public function test($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return test1TableGateway */
    public function test1($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return test2TableGateway */
    public function test2($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return tran_table1TableGateway */
    public function tran_table1($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return tran_table2TableGateway */
    public function tran_table2($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return tran_table3TableGateway */
    public function tran_table3($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /** @return v_articleTableGateway */
    public function v_article($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }
}

class Database extends \ryunosuke\Test\Database
{
    use TableGatewayProvider;
}

class aggregateTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    /** @var static|int */
    public $group_id1;

    /** @var static|int */
    public $group_id2;

    public function id(...$args): static { }

    public function name(...$args): static { }

    public function group_id1(...$args): static { }

    public function group_id2(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>|array<aggregateEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>|array<aggregateEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<aggregateEntity>|array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>|array<aggregateEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}|aggregateEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $insertData
     * @param aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<aggregateEntity|array{id: int|mixed, name: string|mixed, group_id1: int|mixed, group_id2: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class autoTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<autoEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed}>|array<autoEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<autoEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return autoEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<autoEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<autoEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|autoEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param autoEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<autoEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<autoEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_c1TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $seq;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function seq(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c1Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int, seq: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int, seq: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int, seq: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int, seq: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c1Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int, seq: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_c1Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c1Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c1Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_c1Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_c2TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $cid;

    /** @var static|int */
    public $seq;

    /** @var static|string */
    public $name;

    public function cid(...$args): static { }

    public function seq(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $dataarray
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{cid: int, seq: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $where
     * @return array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c2Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{cid: int, seq: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return array<array{cid: int, seq: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return array<array{cid: int, seq: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{cid: int, seq: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{cid: int, seq: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{cid: int, seq: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{cid: int, seq: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{cid: int, seq: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{cid: int, seq: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c2Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array<array{cid: int, seq: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{cid: int, seq: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{cid: int, seq: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{cid: int, seq: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_c2Entity>|array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array<array{cid: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c2Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c2Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{cid: int, seq: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{cid: int|mixed, seq: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_c2Entity|array{cid: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_c3TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $seq;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function seq(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c3Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int, seq: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int, seq: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int, seq: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int, seq: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c3Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int, seq: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return array{id: int, seq: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return array{id: int, seq: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_c3Entity>|array<array{id: int|mixed, seq: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, seq: int|mixed, name: string|mixed}>|array<foreign_c3Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, seq: int|mixed, name: string|mixed}|foreign_c3Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     * @return array{id: int, seq: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $insertData
     * @param foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, seq: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_c3Entity|array{id: int|mixed, seq: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_d1TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $d2_id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function d2_id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>|array<foreign_d1Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>|array<foreign_d1Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_d1Entity>|array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>|array<foreign_d1Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, d2_id: int|mixed, name: string|mixed}|foreign_d1Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, d2_id: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_d1Entity|array{id: int|mixed, d2_id: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_d2TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_d2Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_d2Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_d2Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_d2Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_d2Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_d2Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_d2Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_d2Entity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_d2Entity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_pTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_pEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_pEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_pEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_pEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_pEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_pEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_pEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_pEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_pEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_sTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_sEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_sEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_sEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_sEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<foreign_sEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|foreign_sEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param foreign_sEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_sEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_sEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class foreign_scTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $s_id1;

    /** @var static|int */
    public $s_id2;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function s_id1(...$args): static { }

    public function s_id2(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>|array<foreign_scEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>|array<foreign_scEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<foreign_scEntity>|array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>|array<foreign_scEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}|foreign_scEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $insertData
     * @param foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<foreign_scEntity|array{id: int|mixed, s_id1: int|mixed, s_id2: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class g_ancestorTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $ancestor_id;

    /** @var static|string */
    public $ancestor_name;

    /** @var static|string */
    public $delete_at;

    public function ancestor_id(...$args): static { }

    public function ancestor_name(...$args): static { }

    public function delete_at(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return array{ancestor_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $where
     * @return array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>|array<g_ancestorEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return array{ancestor_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{ancestor_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{ancestor_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return array{ancestor_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{ancestor_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{ancestor_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{ancestor_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{ancestor_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{ancestor_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>|array<g_ancestorEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{ancestor_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{ancestor_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return array{ancestor_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return array{ancestor_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<g_ancestorEntity>|array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array<array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>|array<g_ancestorEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}|g_ancestorEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $data
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     * @return array{ancestor_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<g_ancestorEntity|array{ancestor_id: int|mixed, ancestor_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class g_childTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $child_id;

    /** @var static|int */
    public $parent_id;

    /** @var static|string */
    public $child_name;

    /** @var static|string */
    public $delete_at;

    public function child_id(...$args): static { }

    public function parent_id(...$args): static { }

    public function child_name(...$args): static { }

    public function delete_at(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return array{child_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $where
     * @return array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>|array<g_childEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return array{child_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{child_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{child_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return array{child_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{child_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{child_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{child_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{child_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{child_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>|array<g_childEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{child_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{child_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return array{child_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return array{child_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<g_childEntity>|array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array<array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>|array<g_childEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}|g_childEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $data
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     * @return array{child_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<g_childEntity|array{child_id: int|mixed, parent_id: int|mixed, child_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class g_grand1TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $grand_id;

    /** @var static|int */
    public $parent_id;

    /** @var static|int */
    public $ancestor_id;

    /** @var static|string */
    public $grand1_name;

    /** @var static|string */
    public $delete_at;

    public function grand_id(...$args): static { }

    public function parent_id(...$args): static { }

    public function ancestor_id(...$args): static { }

    public function grand1_name(...$args): static { }

    public function delete_at(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $where
     * @return array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>|array<g_grand1Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{grand_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{grand_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{grand_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{grand_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>|array<g_grand1Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{grand_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<g_grand1Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>|array<g_grand1Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}|g_grand1Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<g_grand1Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand1_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class g_grand2TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $grand_id;

    /** @var static|int */
    public $parent_id;

    /** @var static|int */
    public $ancestor_id;

    /** @var static|string */
    public $grand2_name;

    /** @var static|string */
    public $delete_at;

    public function grand_id(...$args): static { }

    public function parent_id(...$args): static { }

    public function ancestor_id(...$args): static { }

    public function grand2_name(...$args): static { }

    public function delete_at(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $where
     * @return array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>|array<g_grand2Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{grand_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{grand_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{grand_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{grand_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>|array<g_grand2Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{grand_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{grand_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return array{grand_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<g_grand2Entity>|array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array<array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>|array<g_grand2Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}|g_grand2Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $data
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     * @return array{grand_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<g_grand2Entity|array{grand_id: int|mixed, parent_id: int|mixed, ancestor_id: int|mixed, grand2_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class g_parentTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $parent_id;

    /** @var static|int */
    public $ancestor_id;

    /** @var static|string */
    public $parent_name;

    /** @var static|string */
    public $delete_at;

    public function parent_id(...$args): static { }

    public function ancestor_id(...$args): static { }

    public function parent_name(...$args): static { }

    public function delete_at(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $dataarray
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return array{parent_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $where
     * @return array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>|array<g_parentEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return array{parent_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{parent_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $data
     * @return array<array{parent_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return array{parent_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{parent_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{parent_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{parent_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $invalid_columns
     * @return array{parent_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{parent_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>|array<g_parentEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array<array{parent_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return array{parent_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return array{parent_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return array{parent_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<g_parentEntity>|array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}> $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array<array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>|array<g_parentEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}|g_parentEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $data
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     * @return array{parent_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $insertData
     * @param g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<g_parentEntity|array{parent_id: int|mixed, ancestor_id: int|mixed, parent_name: string|mixed, delete_at: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class heavyTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $data;

    public function id(...$args): static { }

    public function data(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $dataarray
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, data: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, data: string|mixed}> $where
     * @return array<array{id: int|mixed, data: string|mixed}>|array<heavyEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, data: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, data: string|mixed} $invalid_columns
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, data: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, data: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array<array{id: int|mixed, data: string|mixed}>|array<heavyEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return heavyEntity|array{id: int|mixed, data: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<heavyEntity>|array<array{id: int|mixed, data: string|mixed}> $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array<array{id: int|mixed, data: string|mixed}>|array<heavyEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, data: string|mixed}|heavyEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $insertData
     * @param heavyEntity|array{id: int|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, data: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<heavyEntity|array{id: int|mixed, data: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<heavyEntity|array{id: int|mixed, data: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class horizontal1TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<horizontal1Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed}>|array<horizontal1Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return horizontal1Entity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<horizontal1Entity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<horizontal1Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|horizontal1Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $insertData
     * @param horizontal1Entity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<horizontal1Entity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<horizontal1Entity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class horizontal2TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $summary;

    public function id(...$args): static { }

    public function summary(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $dataarray
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, summary: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, summary: string|mixed}> $where
     * @return array<array{id: int|mixed, summary: string|mixed}>|array<horizontal2Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @param array{id: int|mixed, summary: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @param array{id: int|mixed, summary: string|mixed} $invalid_columns
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @param array{id: int|mixed, summary: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @param array{id: int|mixed, summary: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array<array{id: int|mixed, summary: string|mixed}>|array<horizontal2Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return horizontal2Entity|array{id: int|mixed, summary: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<horizontal2Entity>|array<array{id: int|mixed, summary: string|mixed}> $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array<array{id: int|mixed, summary: string|mixed}>|array<horizontal2Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int|mixed, summary: string|mixed}|horizontal2Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $data
     * @param array{id: int|mixed, summary: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $insertData
     * @param horizontal2Entity|array{id: int|mixed, summary: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, summary: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<horizontal2Entity|array{id: int|mixed, summary: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<horizontal2Entity|array{id: int|mixed, summary: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class master_tableTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|string */
    public $category;

    /** @var static|int */
    public $subid;

    public function category(...$args): static { }

    public function subid(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $dataarray
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return array{category: string, subid: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{category: string|mixed, subid: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{category: string|mixed, subid: int|mixed}> $where
     * @return array<array{category: string|mixed, subid: int|mixed}>|array<master_tableEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return array{category: string, subid: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $data
     * @return array<array{category: string, subid: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $data
     * @return array<array{category: string, subid: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return array{category: string, subid: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array{category: string, subid: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array{category: string, subid: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @param array{category: string|mixed, subid: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @param array{category: string|mixed, subid: int|mixed} $invalid_columns
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @param array{category: string|mixed, subid: int|mixed} $invalid_columns
     * @return array{category: string, subid: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @param array{category: string|mixed, subid: int|mixed} $invalid_columns
     * @return array{category: string, subid: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array{category: string, subid: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array<array{category: string|mixed, subid: int|mixed}>|array<master_tableEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array<array{category: string, subid: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return array{category: string, subid: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return array{category: string, subid: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return array{category: string, subid: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return master_tableEntity|array{category: string|mixed, subid: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<master_tableEntity>|array<array{category: string|mixed, subid: int|mixed}> $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array<array{category: string|mixed, subid: int|mixed}>|array<master_tableEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string|mixed, subid: int|mixed}|master_tableEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $data
     * @param array{category: string|mixed, subid: int|mixed} $where
     * @return array{category: string, subid: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $insertData
     * @param master_tableEntity|array{category: string|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{category: string|mixed, subid: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<master_tableEntity|array{category: string|mixed, subid: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<master_tableEntity|array{category: string|mixed, subid: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class misctypeTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $pid;

    /** @var static|int */
    public $cint;

    /** @var static|float */
    public $cfloat;

    /** @var static|float|string */
    public $cdecimal;

    /** @var static|\DateTimeImmutable */
    public $cdate;

    /** @var static|string */
    public $cdatetime;

    /** @var static|string */
    public $cstring;

    /** @var static|string */
    public $ctext;

    /** @var static|string */
    public $cbinary;

    /** @var static|string */
    public $cblob;

    /** @var static|array|string */
    public $carray;

    /** @var static|array|string */
    public $cjson;

    /** @var static|\ryunosuke\Test\IntEnum */
    public $eint;

    /** @var static|string */
    public $estring;

    public function id(...$args): static { }

    public function pid(...$args): static { }

    public function cint(...$args): static { }

    public function cfloat(...$args): static { }

    public function cdecimal(...$args): static { }

    public function cdate(...$args): static { }

    public function cdatetime(...$args): static { }

    public function cstring(...$args): static { }

    public function ctext(...$args): static { }

    public function cbinary(...$args): static { }

    public function cblob(...$args): static { }

    public function carray(...$args): static { }

    public function cjson(...$args): static { }

    public function eint(...$args): static { }

    public function estring(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $dataarray
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $where
     * @return array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>|array<misctypeEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $invalid_columns
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>|array<misctypeEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<misctypeEntity>|array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}> $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array<array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>|array<misctypeEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}|misctypeEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $data
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $insertData
     * @param misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<misctypeEntity|array{id: int|mixed, pid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: \DateTimeImmutable|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed, carray: array|string|mixed, cjson: array|string|mixed, eint: \ryunosuke\Test\IntEnum|mixed, estring: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class misctype_childTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $cid;

    /** @var static|int */
    public $cint;

    /** @var static|float */
    public $cfloat;

    /** @var static|float|string */
    public $cdecimal;

    /** @var static|string */
    public $cdate;

    /** @var static|string */
    public $cdatetime;

    /** @var static|string */
    public $cstring;

    /** @var static|string */
    public $ctext;

    /** @var static|string */
    public $cbinary;

    /** @var static|string */
    public $cblob;

    public function id(...$args): static { }

    public function cid(...$args): static { }

    public function cint(...$args): static { }

    public function cfloat(...$args): static { }

    public function cdecimal(...$args): static { }

    public function cdate(...$args): static { }

    public function cdatetime(...$args): static { }

    public function cstring(...$args): static { }

    public function ctext(...$args): static { }

    public function cbinary(...$args): static { }

    public function cblob(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $dataarray
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $where
     * @return array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>|array<misctype_childEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $invalid_columns
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>|array<misctype_childEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<misctype_childEntity>|array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}> $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array<array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>|array<misctype_childEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}|misctype_childEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $data
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $insertData
     * @param misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<misctype_childEntity|array{id: int|mixed, cid: int|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed, cdate: string|mixed, cdatetime: string|mixed, cstring: string|mixed, ctext: string|mixed, cbinary: string|mixed, cblob: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class multicolumnTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    /** @var static|int */
    public $flag1;

    /** @var static|string */
    public $title1;

    /** @var static|string */
    public $value1;

    /** @var static|int */
    public $flag2;

    /** @var static|string */
    public $title2;

    /** @var static|string */
    public $value2;

    /** @var static|int */
    public $flag3;

    /** @var static|string */
    public $title3;

    /** @var static|string */
    public $value3;

    /** @var static|int */
    public $flag4;

    /** @var static|string */
    public $title4;

    /** @var static|string */
    public $value4;

    /** @var static|int */
    public $flag5;

    /** @var static|string */
    public $title5;

    /** @var static|string */
    public $value5;

    public function id(...$args): static { }

    public function name(...$args): static { }

    public function flag1(...$args): static { }

    public function title1(...$args): static { }

    public function value1(...$args): static { }

    public function flag2(...$args): static { }

    public function title2(...$args): static { }

    public function value2(...$args): static { }

    public function flag3(...$args): static { }

    public function title3(...$args): static { }

    public function value3(...$args): static { }

    public function flag4(...$args): static { }

    public function title4(...$args): static { }

    public function value4(...$args): static { }

    public function flag5(...$args): static { }

    public function title5(...$args): static { }

    public function value5(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>|array<multicolumnEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>|array<multicolumnEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<multicolumnEntity>|array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>|array<multicolumnEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}|multicolumnEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $insertData
     * @param multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<multicolumnEntity|array{id: int|mixed, name: string|mixed, flag1: int|mixed, title1: string|mixed, value1: string|mixed, flag2: int|mixed, title2: string|mixed, value2: string|mixed, flag3: int|mixed, title3: string|mixed, value3: string|mixed, flag4: int|mixed, title4: string|mixed, value4: string|mixed, flag5: int|mixed, title5: string|mixed, value5: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class multifkeyTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $mainid;

    /** @var static|int */
    public $subid;

    public function id(...$args): static { }

    public function mainid(...$args): static { }

    public function subid(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $dataarray
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $where
     * @return array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>|array<multifkeyEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $invalid_columns
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>|array<multifkeyEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<multifkeyEntity>|array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}> $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array<array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>|array<multifkeyEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int|mixed, mainid: int|mixed, subid: int|mixed}|multifkeyEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $data
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $insertData
     * @param multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, mainid: int|mixed, subid: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<multifkeyEntity|array{id: int|mixed, mainid: int|mixed, subid: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class multifkey2TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $fcol1;

    /** @var static|int */
    public $fcol2;

    /** @var static|int */
    public $fcol9;

    public function id(...$args): static { }

    public function fcol1(...$args): static { }

    public function fcol2(...$args): static { }

    public function fcol9(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $dataarray
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $where
     * @return array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>|array<multifkey2Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $invalid_columns
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>|array<multifkey2Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<multifkey2Entity>|array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}> $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array<array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>|array<multifkey2Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}|multifkey2Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $data
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $insertData
     * @param multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<multifkey2Entity|array{id: int|mixed, fcol1: int|mixed, fcol2: int|mixed, fcol9: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class multiprimaryTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $mainid;

    /** @var static|int */
    public $subid;

    /** @var static|string */
    public $name;

    public function mainid(...$args): static { }

    public function subid(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $dataarray
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return array{mainid: int, subid: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $where
     * @return array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>|array<multiprimaryEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return array{mainid: int, subid: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $data
     * @return array<array{mainid: int, subid: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $data
     * @return array<array{mainid: int, subid: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return array{mainid: int, subid: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array{mainid: int, subid: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array{mainid: int, subid: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $invalid_columns
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $invalid_columns
     * @return array{mainid: int, subid: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $invalid_columns
     * @return array{mainid: int, subid: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array{mainid: int, subid: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>|array<multiprimaryEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array<array{mainid: int, subid: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return array{mainid: int, subid: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return array{mainid: int, subid: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return array{mainid: int, subid: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<multiprimaryEntity>|array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}> $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array<array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>|array<multiprimaryEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int|mixed, subid: int|mixed, name: string|mixed}|multiprimaryEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $data
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     * @return array{mainid: int, subid: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $insertData
     * @param multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{mainid: int|mixed, subid: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<multiprimaryEntity|array{mainid: int|mixed, subid: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class multiuniqueTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $uc_s;

    /** @var static|int */
    public $uc_i;

    /** @var static|string */
    public $uc1;

    /** @var static|int */
    public $uc2;

    /** @var static|int */
    public $groupkey;

    public function id(...$args): static { }

    public function uc_s(...$args): static { }

    public function uc_i(...$args): static { }

    public function uc1(...$args): static { }

    public function uc2(...$args): static { }

    public function groupkey(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $dataarray
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $where
     * @return array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>|array<multiuniqueEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $invalid_columns
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>|array<multiuniqueEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<multiuniqueEntity>|array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}> $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array<array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>|array<multiuniqueEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}|multiuniqueEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $data
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $insertData
     * @param multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<multiuniqueEntity|array{id: int|mixed, uc_s: string|mixed, uc_i: int|mixed, uc1: string|mixed, uc2: int|mixed, groupkey: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class noautoTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|string */
    public $id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $dataarray
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return array{id: string}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: string|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: string|mixed, name: string|mixed}> $where
     * @return array<array{id: string|mixed, name: string|mixed}>|array<noautoEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return array{id: string}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $data
     * @return array<array{id: string}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $data
     * @return array<array{id: string}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return array{id: string}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array{id: string}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array{id: string}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @param array{id: string|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @param array{id: string|mixed, name: string|mixed} $invalid_columns
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @param array{id: string|mixed, name: string|mixed} $invalid_columns
     * @return array{id: string}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @param array{id: string|mixed, name: string|mixed} $invalid_columns
     * @return array{id: string}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array{id: string}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array<array{id: string|mixed, name: string|mixed}>|array<noautoEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array<array{id: string}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return array{id: string}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return array{id: string}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return array{id: string}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return noautoEntity|array{id: string|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<noautoEntity>|array<array{id: string|mixed, name: string|mixed}> $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array<array{id: string|mixed, name: string|mixed}>|array<noautoEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string|mixed, name: string|mixed}|noautoEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $data
     * @param array{id: string|mixed, name: string|mixed} $where
     * @return array{id: string}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $insertData
     * @param noautoEntity|array{id: string|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: string|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<noautoEntity|array{id: string|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<noautoEntity|array{id: string|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class noprimaryTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    public function id(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $dataarray
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return array{}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed}> $where
     * @return array<array{id: int|mixed}>|array<noprimaryEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return array{}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $data
     * @return array<array{}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $data
     * @return array<array{}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return array{}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array{}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array{}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed} $where
     * @param array{id: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed} $where
     * @param array{id: int|mixed} $invalid_columns
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed} $where
     * @param array{id: int|mixed} $invalid_columns
     * @return array{}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed} $where
     * @param array{id: int|mixed} $invalid_columns
     * @return array{}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array{}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array<array{id: int|mixed}>|array<noprimaryEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array<array{}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return array{}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<noprimaryEntity>|array<array{id: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return array{}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return array{}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return noprimaryEntity|array{id: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $data
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<noprimaryEntity>|array<array{id: int|mixed}> $data
     * @param array{id: int|mixed} $where
     * @return array<array{id: int|mixed}>|array<noprimaryEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{id: int|mixed}|noprimaryEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param noprimaryEntity|array{id: int|mixed} $data
     * @param array{id: int|mixed} $where
     * @return array{}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param noprimaryEntity|array{id: int|mixed} $insertData
     * @param noprimaryEntity|array{id: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<noprimaryEntity|array{id: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<noprimaryEntity|array{id: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class notnullsTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    /** @var static|int */
    public $cint;

    /** @var static|float */
    public $cfloat;

    /** @var static|float|string */
    public $cdecimal;

    public function id(...$args): static { }

    public function name(...$args): static { }

    public function cint(...$args): static { }

    public function cfloat(...$args): static { }

    public function cdecimal(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>|array<notnullsEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>|array<notnullsEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<notnullsEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>|array<notnullsEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|notnullsEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<notnullsEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class nullableTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    /** @var static|int */
    public $cint;

    /** @var static|float */
    public $cfloat;

    /** @var static|float|string */
    public $cdecimal;

    public function id(...$args): static { }

    public function name(...$args): static { }

    public function cint(...$args): static { }

    public function cfloat(...$args): static { }

    public function cdecimal(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>|array<nullableEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>|array<nullableEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<nullableEntity>|array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>|array<nullableEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}|nullableEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $insertData
     * @param nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<nullableEntity|array{id: int|mixed, name: string|mixed, cint: int|mixed, cfloat: float|mixed, cdecimal: float|string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class oprlogTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $category;

    /** @var static|int */
    public $primary_id;

    /** @var static|string */
    public $log_date;

    /** @var static|string */
    public $message;

    public function id(...$args): static { }

    public function category(...$args): static { }

    public function primary_id(...$args): static { }

    public function log_date(...$args): static { }

    public function message(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $dataarray
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $where
     * @return array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>|array<oprlogEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $invalid_columns
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>|array<oprlogEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<oprlogEntity>|array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}> $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array<array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>|array<oprlogEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}|oprlogEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $data
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $insertData
     * @param oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<oprlogEntity|array{id: int|mixed, category: string|mixed, primary_id: int|mixed, log_date: string|mixed, message: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class pagingTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    public function id(...$args): static { }

    public function name(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<pagingEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed}>|array<pagingEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return pagingEntity|array{id: int|mixed, name: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<pagingEntity>|array<array{id: int|mixed, name: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed}>|array<pagingEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed}|pagingEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $insertData
     * @param pagingEntity|array{id: int|mixed, name: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<pagingEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<pagingEntity|array{id: int|mixed, name: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class ArticleTableGateway extends \ryunosuke\Test\Gateway\Article
{
    use TableGatewayProvider;

    /** @var static|int */
    public $article_id;

    /** @var static|string */
    public $title;

    /** @var static|array|string */
    public $checks;

    /** @var static|string */
    public $delete_at;

    /** @var static|int */
    public $title2;

    /** @var static|int */
    public $title3;

    /** @var static|int */
    public $title4;

    /** @var static|int */
    public $title5;

    /** @var static|int */
    public $comment_count;

    /** @var static|int */
    public $vaffect;

    public function article_id(...$args): static { }

    public function title(...$args): static { }

    public function checks(...$args): static { }

    public function delete_at(...$args): static { }

    public function title2(...$args): static { }

    public function title3(...$args): static { }

    public function title4(...$args): static { }

    public function title5(...$args): static { }

    public function comment_count(...$args): static { }

    public function vaffect(...$args): static { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::affectArray()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::array()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayForAffect()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayForShare()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayForUpdate()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayInShare()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayOrThrow()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assoc()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocForAffect()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocForShare()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocForUpdate()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocInShare()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocOrThrow()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::changeArray()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $dataarray
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::create()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::delete()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteArray()
     * @param array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteArrayAndBefore()
     * @param array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $where
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>|array<ArticleEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrict()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrictAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrictAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrictOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrict()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrictAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrictAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrictOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::destroyAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function destroyAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::destroyAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function destroyAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::destroyOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function destroyOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::find()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findForAffect()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findForShare()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findForUpdate()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findInShare()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findOrThrow()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::getEmptyRecord()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insert()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertArray()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertArrayAndPrimary()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @return array<array{article_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertArrayOrThrow()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @return array<array{article_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdate()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdateAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdateAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdateOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalid()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalidAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalidAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return array{article_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalidOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return array{article_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modify()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyArray()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyArrayAndBefore()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>|array<ArticleEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyArrayAndPrimary()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array<array{article_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifySelect()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::neighbor()
     * @return array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reduce()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reduceAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reduceOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::removeAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function removeAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::removeAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function removeAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::removeOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function removeOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replace()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replaceAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replaceAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replaceOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reviseAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function reviseAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reviseAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function reviseAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reviseOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function reviseOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::save()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tuple()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleForAffect()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleForShare()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleForUpdate()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleInShare()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleOrThrow()
     * @return ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::update()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateArray()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateArrayAndBefore()
     * @param array<ArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>|array<ArticleEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrict()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrictAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrictAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrictOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrict()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrictAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrictAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrictOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upgradeAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function upgradeAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upgradeAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function upgradeAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upgradeOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function upgradeOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsert()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsertAndBefore()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ArticleEntity
     */
    public function upsertAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsertAndPrimary()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function upsertAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsertOrThrow()
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function upsertOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::using()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::yieldArray()
     * @return iterable<ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::yieldAssoc()
     * @return iterable<ArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class ManagedArticleTableGateway extends \ryunosuke\Test\Gateway\Article
{
    use TableGatewayProvider;

    /** @var static|int */
    public $article_id;

    /** @var static|string */
    public $title;

    /** @var static|array|string */
    public $checks;

    /** @var static|string */
    public $delete_at;

    /** @var static|int */
    public $title2;

    /** @var static|int */
    public $title3;

    /** @var static|int */
    public $title4;

    /** @var static|int */
    public $title5;

    /** @var static|int */
    public $comment_count;

    /** @var static|int */
    public $vaffect;

    public function article_id(...$args): static { }

    public function title(...$args): static { }

    public function checks(...$args): static { }

    public function delete_at(...$args): static { }

    public function title2(...$args): static { }

    public function title3(...$args): static { }

    public function title4(...$args): static { }

    public function title5(...$args): static { }

    public function comment_count(...$args): static { }

    public function vaffect(...$args): static { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::affectArray()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::array()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayForAffect()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayForShare()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayForUpdate()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayInShare()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::arrayOrThrow()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assoc()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocForAffect()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocForShare()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocForUpdate()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocInShare()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::assocOrThrow()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::changeArray()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $dataarray
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::create()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::delete()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteArray()
     * @param array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteArrayAndBefore()
     * @param array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $where
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>|array<ManagedArticleEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrict()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrictAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrictAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteExcludeRestrictOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrict()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrictAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrictAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteIncludeRestrictOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::deleteOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::destroyAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function destroyAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::destroyAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function destroyAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::destroyOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function destroyOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::find()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findForAffect()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findForShare()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findForUpdate()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findInShare()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::findOrThrow()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::getEmptyRecord()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insert()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertArray()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertArrayAndPrimary()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @return array<array{article_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertArrayOrThrow()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @return array<array{article_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdate()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdateAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdateAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertOrUpdateOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalid()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalidAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalidAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return array{article_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::invalidOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $invalid_columns
     * @return array{article_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modify()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyArray()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyArrayAndBefore()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>|array<ManagedArticleEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyArrayAndPrimary()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array<array{article_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifyOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::modifySelect()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::neighbor()
     * @return array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reduce()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reduceAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reduceOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::removeAndBefore()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function removeAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::removeAndPrimary()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function removeAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::removeOrThrow()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function removeOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replace()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replaceAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replaceAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::replaceOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return array{article_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reviseAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function reviseAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reviseAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function reviseAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::reviseOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function reviseOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::save()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tuple()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleForAffect()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleForShare()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleForUpdate()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleInShare()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::tupleOrThrow()
     * @return ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::update()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateArray()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateArrayAndBefore()
     * @param array<ManagedArticleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}> $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>|array<ManagedArticleEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrict()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrictAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrictAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateExcludeRestrictOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrict()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrictAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrictAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateIncludeRestrictOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::updateOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upgradeAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function upgradeAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upgradeAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function upgradeAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upgradeOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     * @return array{article_id: int}
     */
    public function upgradeOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsert()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsertAndBefore()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}|ManagedArticleEntity
     */
    public function upsertAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsertAndPrimary()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function upsertAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::upsertOrThrow()
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $insertData
     * @param ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $updateData
     * @return array{article_id: int}
     */
    public function upsertOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::using()
     * @param array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::yieldArray()
     * @return iterable<ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Article::yieldAssoc()
     * @return iterable<ManagedArticleEntity|array{article_id: int|mixed, title: string|mixed, checks: array|string|mixed, delete_at: string|mixed, title2: int|mixed, title3: int|mixed, title4: int|mixed, title5: int|mixed, comment_count: int|mixed, vaffect: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class CommentTableGateway extends \ryunosuke\Test\Gateway\Comment
{
    use TableGatewayProvider;

    /** @var static|int */
    public $comment_id;

    /** @var static|int */
    public $article_id;

    /** @var static|string */
    public $comment;

    public function comment_id(...$args): static { }

    public function article_id(...$args): static { }

    public function comment(...$args): static { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::affectArray()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::array()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayForAffect()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayForShare()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayForUpdate()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayInShare()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayOrThrow()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assoc()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocForAffect()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocForShare()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocForUpdate()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocInShare()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocOrThrow()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::changeArray()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $dataarray
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::create()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::delete()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteArray()
     * @param array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteArrayAndBefore()
     * @param array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $where
     * @return array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>|array<CommentEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrict()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrictAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrictAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrictOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrict()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrictAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrictAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrictOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::destroyAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function destroyAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::destroyAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function destroyAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::destroyOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function destroyOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::find()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findForAffect()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findForShare()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findForUpdate()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findInShare()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findOrThrow()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::getEmptyRecord()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insert()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertArray()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertArrayAndPrimary()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @return array<array{comment_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertArrayOrThrow()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @return array<array{comment_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdate()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdateAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdateAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdateOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalid()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalidAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalidAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return array{comment_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalidOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return array{comment_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modify()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyArray()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyArrayAndBefore()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>|array<CommentEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyArrayAndPrimary()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array<array{comment_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifySelect()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::neighbor()
     * @return array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reduce()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reduceAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reduceOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::removeAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function removeAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::removeAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function removeAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::removeOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function removeOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replace()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replaceAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replaceAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replaceOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reviseAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function reviseAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reviseAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function reviseAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reviseOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function reviseOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::save()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tuple()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleForAffect()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleForShare()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleForUpdate()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleInShare()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleOrThrow()
     * @return CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::update()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateArray()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateArrayAndBefore()
     * @param array<CommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>|array<CommentEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrict()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrictAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrictAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrictOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrict()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrictAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrictAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrictOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upgradeAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function upgradeAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upgradeAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function upgradeAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upgradeOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function upgradeOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsert()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsertAndBefore()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|CommentEntity
     */
    public function upsertAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsertAndPrimary()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function upsertAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsertOrThrow()
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function upsertOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::using()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::yieldArray()
     * @return iterable<CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::yieldAssoc()
     * @return iterable<CommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class ManagedCommentTableGateway extends \ryunosuke\Test\Gateway\Comment
{
    use TableGatewayProvider;

    /** @var static|int */
    public $comment_id;

    /** @var static|int */
    public $article_id;

    /** @var static|string */
    public $comment;

    public function comment_id(...$args): static { }

    public function article_id(...$args): static { }

    public function comment(...$args): static { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::affectArray()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::array()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayForAffect()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayForShare()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayForUpdate()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayInShare()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::arrayOrThrow()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assoc()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocForAffect()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocForShare()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocForUpdate()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocInShare()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::assocOrThrow()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::changeArray()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $dataarray
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::create()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::delete()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteArray()
     * @param array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteArrayAndBefore()
     * @param array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $where
     * @return array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>|array<ManagedCommentEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrict()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrictAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrictAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteExcludeRestrictOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrict()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrictAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrictAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteIncludeRestrictOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::deleteOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::destroyAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function destroyAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::destroyAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function destroyAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::destroyOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function destroyOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::find()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findForAffect()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findForShare()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findForUpdate()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findInShare()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::findOrThrow()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::getEmptyRecord()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insert()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertArray()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertArrayAndPrimary()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @return array<array{comment_id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertArrayOrThrow()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @return array<array{comment_id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdate()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdateAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdateAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertOrUpdateOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalid()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalidAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalidAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return array{comment_id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::invalidOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $invalid_columns
     * @return array{comment_id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modify()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyArray()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyArrayAndBefore()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>|array<ManagedCommentEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyArrayAndPrimary()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array<array{comment_id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifyOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::modifySelect()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::neighbor()
     * @return array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reduce()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reduceAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reduceOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::removeAndBefore()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function removeAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::removeAndPrimary()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function removeAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::removeOrThrow()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function removeOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replace()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replaceAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replaceAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::replaceOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return array{comment_id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reviseAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function reviseAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reviseAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function reviseAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::reviseOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function reviseOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::save()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tuple()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleForAffect()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleForShare()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleForUpdate()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleInShare()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleInShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::tupleOrThrow()
     * @return ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::update()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateArray()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateArrayAndBefore()
     * @param array<ManagedCommentEntity>|array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}> $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array<array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>|array<ManagedCommentEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrict()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrictAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrictAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateExcludeRestrictOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrict()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrictAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrictAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateIncludeRestrictOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::updateOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upgradeAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function upgradeAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upgradeAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function upgradeAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upgradeOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $data
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     * @return array{comment_id: int}
     */
    public function upgradeOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsert()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsertAndBefore()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}|ManagedCommentEntity
     */
    public function upsertAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsertAndPrimary()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function upsertAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::upsertOrThrow()
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $insertData
     * @param ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $updateData
     * @return array{comment_id: int}
     */
    public function upsertOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::using()
     * @param array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::yieldArray()
     * @return iterable<ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\Test\Gateway\Comment::yieldAssoc()
     * @return iterable<ManagedCommentEntity|array{comment_id: int|mixed, article_id: int|mixed, comment: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class testTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name;

    /** @var static|string */
    public $data;

    public function id(...$args): static { }

    public function name(...$args): static { }

    public function data(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $dataarray
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $where
     * @return array<array{id: int|mixed, name: string|mixed, data: string|mixed}>|array<testEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array<array{id: int|mixed, name: string|mixed, data: string|mixed}>|array<testEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<testEntity>|array<array{id: int|mixed, name: string|mixed, data: string|mixed}> $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array<array{id: int|mixed, name: string|mixed, data: string|mixed}>|array<testEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int|mixed, name: string|mixed, data: string|mixed}|testEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $data
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $insertData
     * @param testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name: string|mixed, data: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<testEntity|array{id: int|mixed, name: string|mixed, data: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class test1TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name1;

    public function id(...$args): static { }

    public function name1(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $dataarray
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name1: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name1: string|mixed}> $where
     * @return array<array{id: int|mixed, name1: string|mixed}>|array<test1Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @param array{id: int|mixed, name1: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @param array{id: int|mixed, name1: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @param array{id: int|mixed, name1: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @param array{id: int|mixed, name1: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array<array{id: int|mixed, name1: string|mixed}>|array<test1Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return test1Entity|array{id: int|mixed, name1: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<test1Entity>|array<array{id: int|mixed, name1: string|mixed}> $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array<array{id: int|mixed, name1: string|mixed}>|array<test1Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int|mixed, name1: string|mixed}|test1Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $data
     * @param array{id: int|mixed, name1: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $insertData
     * @param test1Entity|array{id: int|mixed, name1: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name1: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<test1Entity|array{id: int|mixed, name1: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<test1Entity|array{id: int|mixed, name1: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class test2TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|string */
    public $name2;

    public function id(...$args): static { }

    public function name2(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $dataarray
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, name2: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, name2: string|mixed}> $where
     * @return array<array{id: int|mixed, name2: string|mixed}>|array<test2Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @param array{id: int|mixed, name2: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @param array{id: int|mixed, name2: string|mixed} $invalid_columns
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @param array{id: int|mixed, name2: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @param array{id: int|mixed, name2: string|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array<array{id: int|mixed, name2: string|mixed}>|array<test2Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return test2Entity|array{id: int|mixed, name2: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<test2Entity>|array<array{id: int|mixed, name2: string|mixed}> $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array<array{id: int|mixed, name2: string|mixed}>|array<test2Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int|mixed, name2: string|mixed}|test2Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $data
     * @param array{id: int|mixed, name2: string|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $insertData
     * @param test2Entity|array{id: int|mixed, name2: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, name2: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<test2Entity|array{id: int|mixed, name2: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<test2Entity|array{id: int|mixed, name2: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class tran_table1TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $master_id;

    public function id(...$args): static { }

    public function master_id(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $dataarray
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, master_id: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, master_id: int|mixed}> $where
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table1Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table1Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return tran_table1Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<tran_table1Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table1Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table1Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table1Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<tran_table1Entity|array{id: int|mixed, master_id: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<tran_table1Entity|array{id: int|mixed, master_id: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class tran_table2TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $master_id;

    public function id(...$args): static { }

    public function master_id(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $dataarray
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, master_id: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, master_id: int|mixed}> $where
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table2Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table2Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return tran_table2Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<tran_table2Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table2Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table2Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table2Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<tran_table2Entity|array{id: int|mixed, master_id: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<tran_table2Entity|array{id: int|mixed, master_id: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class tran_table3TableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $id;

    /** @var static|int */
    public $master_id;

    public function id(...$args): static { }

    public function master_id(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $dataarray
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{id: int|mixed, master_id: int|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{id: int|mixed, master_id: int|mixed}> $where
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table3Entity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @return array<array{id: int}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @param array{id: int|mixed, master_id: int|mixed} $invalid_columns
     * @return array{id: int}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table3Entity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array<array{id: int}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return array{id: int}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return array{id: int}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return tran_table3Entity|array{id: int|mixed, master_id: int|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<tran_table3Entity>|array<array{id: int|mixed, master_id: int|mixed}> $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array<array{id: int|mixed, master_id: int|mixed}>|array<tran_table3Entity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int|mixed, master_id: int|mixed}|tran_table3Entity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $data
     * @param array{id: int|mixed, master_id: int|mixed} $where
     * @return array{id: int}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $insertData
     * @param tran_table3Entity|array{id: int|mixed, master_id: int|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{id: int|mixed, master_id: int|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<tran_table3Entity|array{id: int|mixed, master_id: int|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<tran_table3Entity|array{id: int|mixed, master_id: int|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class v_articleTableGateway extends \ryunosuke\dbml\Gateway\TableGateway
{
    use TableGatewayProvider;

    /** @var static|int */
    public $article_id;

    /** @var static|string */
    public $title;

    /** @var static|string */
    public $checks;

    /** @var static|string */
    public $delete_at;

    /** @var static|string */
    public $comment_count;

    public function article_id(...$args): static { }

    public function title(...$args): static { }

    public function checks(...$args): static { }

    public function delete_at(...$args): static { }

    public function comment_count(...$args): static { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::affectArray()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $dataarray
     * @return mixed
     */
    public function affectArray($dataarray, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::array()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectArray()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function array($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectArrayForAffect()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function arrayForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectArrayForShare()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function arrayForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectArrayForUpdate()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function arrayForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::arrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectArrayOrThrow()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function arrayOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assoc()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectAssoc()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function assoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectAssocForAffect()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function assocForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectAssocForShare()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function assocForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectAssocForUpdate()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function assocForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::assocOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectAssocOrThrow()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function assocOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::changeArray()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $dataarray
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function changeArray($dataarray, $where, $uniquekey = "PRIMARY", $returning = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::create()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::createWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return array{}
     */
    public function create($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::delete()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function delete($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteAndBeforeWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function deleteAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteAndPrimaryWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function deleteAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArray()
     * @param array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $where
     * @return mixed
     */
    public function deleteArray($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteArrayAndBeforeWithoutTable()
     * @param array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $where
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>|array<v_articleEntity>
     */
    public function deleteArrayAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrict()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function deleteExcludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteExcludeRestrictAndBeforeWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function deleteExcludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteExcludeRestrictAndPrimaryWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function deleteExcludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteExcludeRestrictOrThrowWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function deleteExcludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrict()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function deleteIncludeRestrict($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::deleteIncludeRestrictAndBeforeWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function deleteIncludeRestrictAndBefore($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::deleteIncludeRestrictAndPrimaryWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function deleteIncludeRestrictAndPrimary($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteIncludeRestrictOrThrowWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function deleteIncludeRestrictOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::deleteOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::deleteOrThrowWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function deleteOrThrow($where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::find()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function find($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForAffect()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function findForAffect($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForShare()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function findForShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findForUpdate()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function findForUpdate($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findInShare()
     * @see \ryunosuke\dbml\Mixin\FindTrait::findForShare()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function findInShare($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::findOrThrow()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function findOrThrow($variadic_primary, $tableDescriptor = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::getEmptyRecord()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function getEmptyRecord($default = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insert()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return mixed
     */
    public function insert($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertAndPrimaryWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return array{}
     */
    public function insertAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArray()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $data
     * @return mixed
     */
    public function insertArray($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertArrayAndPrimaryWithoutTable()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $data
     * @return array<array{}>
     */
    public function insertArrayAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertArrayOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertArrayOrThrowWithoutTable()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $data
     * @return array<array{}>
     */
    public function insertArrayOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrThrowWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return array{}
     */
    public function insertOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdate()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return mixed
     */
    public function insertOrUpdate($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::insertOrUpdateAndBeforeWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function insertOrUpdateAndBefore($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::insertOrUpdateAndPrimaryWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array{}
     */
    public function insertOrUpdateAndPrimary($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertOrUpdateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::insertOrUpdateOrThrowWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array{}
     */
    public function insertOrUpdateOrThrow($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::insertSelect()
     * @return mixed
     */
    public function insertSelect($sql, $columns = [], iterable $params = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalid()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $invalid_columns
     * @return mixed
     */
    public function invalid($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::invalidAndBeforeWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $invalid_columns
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function invalidAndBefore($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::invalidAndPrimaryWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $invalid_columns
     * @return array{}
     */
    public function invalidAndPrimary($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::invalidOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::invalidOrThrowWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $invalid_columns
     * @return array{}
     */
    public function invalidOrThrow($where = [], ?array $invalid_columns = null, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modify()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return mixed
     */
    public function modify($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyAndBeforeWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function modifyAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyAndPrimaryWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array{}
     */
    public function modifyAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArray()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return mixed
     */
    public function modifyArray($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::modifyArrayAndBeforeWithoutTable()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>|array<v_articleEntity>
     */
    public function modifyArrayAndBefore($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyArrayAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::modifyArrayAndPrimaryWithoutTable()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array<array{}>
     */
    public function modifyArrayAndPrimary($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifyOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::modifyOrThrowWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return array{}
     */
    public function modifyOrThrow($insertData, $updateData = [], $uniquekey = "PRIMARY", ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::modifySelect()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return mixed
     */
    public function modifySelect($sql, $updateData = [], $uniquekey = "PRIMARY", $columns = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::neighbor()
     * @return array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function neighbor(array $predicates = [], int $limit = 1): array { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduce()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function reduce($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::reduceAndBeforeWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function reduceAndBefore($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::reduceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::reduceOrThrowWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function reduceOrThrow($limit = null, $orderBy = [], $groupBy = [], $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replace()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return mixed
     */
    public function replace($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::replaceAndBeforeWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function replaceAndBefore($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::replaceAndPrimaryWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return array{}
     */
    public function replaceAndPrimary($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::replaceOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::replaceOrThrowWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return array{}
     */
    public function replaceOrThrow($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::save()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @return mixed
     */
    public function save($data, ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncate()
     * @return mixed
     */
    public function truncate() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::truncateIncludeRestrict()
     * @return mixed
     */
    public function truncateIncludeRestrict() { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tuple()
     * @see \ryunosuke\dbml\Mixin\SelectMethodTrait::selectTuple()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function tuple($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForAffect()
     * @see \ryunosuke\dbml\Mixin\SelectForAffectTrait::selectTupleForAffect()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function tupleForAffect($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForShare()
     * @see \ryunosuke\dbml\Mixin\SelectForShareTrait::selectTupleForShare()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function tupleForShare($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleForUpdate()
     * @see \ryunosuke\dbml\Mixin\SelectForUpdateTrait::selectTupleForUpdate()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function tupleForUpdate($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::tupleOrThrow()
     * @see \ryunosuke\dbml\Mixin\SelectOrThrowTrait::selectTupleOrThrow()
     * @return v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}
     */
    public function tupleOrThrow($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = []) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::update()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function update($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateAndBeforeWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function updateAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateAndPrimaryWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function updateAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArray()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function updateArray($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateArrayAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateArrayAndBeforeWithoutTable()
     * @param array<v_articleEntity>|array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}> $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array<array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>|array<v_articleEntity>
     */
    public function updateArrayAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrict()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function updateExcludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateExcludeRestrictAndBeforeWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function updateExcludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateExcludeRestrictAndPrimaryWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function updateExcludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateExcludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateExcludeRestrictOrThrowWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function updateExcludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrict()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return mixed
     */
    public function updateIncludeRestrict($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndBefore()
     * @see \ryunosuke\dbml\Mixin\AffectAndBeforeTrait::updateIncludeRestrictAndBeforeWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}|v_articleEntity
     */
    public function updateIncludeRestrictAndBefore($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictAndPrimary()
     * @see \ryunosuke\dbml\Mixin\AffectAndPrimaryTrait::updateIncludeRestrictAndPrimaryWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function updateIncludeRestrictAndPrimary($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateIncludeRestrictOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateIncludeRestrictOrThrowWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function updateIncludeRestrictOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::updateOrThrow()
     * @see \ryunosuke\dbml\Mixin\AffectOrThrowTrait::updateOrThrowWithoutTable()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $data
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     * @return array{}
     */
    public function updateOrThrow($data, $where = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::upsert()
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $insertData
     * @param v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $updateData
     * @return mixed
     */
    public function upsert($insertData, $updateData = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::using()
     * @see \ryunosuke\dbml\Mixin\AggregateTrait::usingWithoutTable()
     * @param array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed} $where
     */
    public function using($where = [], bool $restrict = true, bool $cascade = false, bool $setnull = false): bool { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldArray()
     * @return iterable<v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function yieldArray($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }

    /**
     * @see \ryunosuke\dbml\Gateway\TableGateway::yieldAssoc()
     * @return iterable<v_articleEntity|array{article_id: int|mixed, title: string|mixed, checks: string|mixed, delete_at: string|mixed, comment_count: string|mixed}>
     */
    public function yieldAssoc($tableDescriptor = [], $where = [], $orderBy = [], $limit = [], $groupBy = [], $having = [], ...$opt) { }
}

class aggregateEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;

    /** @var int */
    public $group_id1;

    /** @var int */
    public $group_id2;
}

class autoEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;
}

class foreign_c1Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $seq;

    /** @var string */
    public $name;
}

class foreign_c2Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $cid;

    /** @var int */
    public $seq;

    /** @var string */
    public $name;
}

class foreign_c3Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $seq;

    /** @var string */
    public $name;
}

class foreign_d1Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $d2_id;

    /** @var string */
    public $name;
}

class foreign_d2Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;
}

class foreign_pEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;
}

class foreign_sEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;
}

class foreign_scEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $s_id1;

    /** @var int */
    public $s_id2;

    /** @var string */
    public $name;
}

class g_ancestorEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $ancestor_id;

    /** @var string */
    public $ancestor_name;

    /** @var string */
    public $delete_at;
}

class g_childEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $child_id;

    /** @var int */
    public $parent_id;

    /** @var string */
    public $child_name;

    /** @var string */
    public $delete_at;
}

class g_grand1Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $grand_id;

    /** @var int */
    public $parent_id;

    /** @var int */
    public $ancestor_id;

    /** @var string */
    public $grand1_name;

    /** @var string */
    public $delete_at;
}

class g_grand2Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $grand_id;

    /** @var int */
    public $parent_id;

    /** @var int */
    public $ancestor_id;

    /** @var string */
    public $grand2_name;

    /** @var string */
    public $delete_at;
}

class g_parentEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $parent_id;

    /** @var int */
    public $ancestor_id;

    /** @var string */
    public $parent_name;

    /** @var string */
    public $delete_at;
}

class heavyEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $data;
}

class horizontal1Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;
}

class horizontal2Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $summary;
}

class master_tableEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var string */
    public $category;

    /** @var int */
    public $subid;
}

class misctypeEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $pid;

    /** @var int */
    public $cint;

    /** @var float */
    public $cfloat;

    /** @var float|string */
    public $cdecimal;

    /** @var \DateTimeImmutable */
    public $cdate;

    /** @var string */
    public $cdatetime;

    /** @var string */
    public $cstring;

    /** @var string */
    public $ctext;

    /** @var string */
    public $cbinary;

    /** @var string */
    public $cblob;

    /** @var array|string */
    public $carray;

    /** @var array|string */
    public $cjson;

    /** @var \ryunosuke\Test\IntEnum */
    public $eint;

    /** @var string */
    public $estring;
}

class misctype_childEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $cid;

    /** @var int */
    public $cint;

    /** @var float */
    public $cfloat;

    /** @var float|string */
    public $cdecimal;

    /** @var string */
    public $cdate;

    /** @var string */
    public $cdatetime;

    /** @var string */
    public $cstring;

    /** @var string */
    public $ctext;

    /** @var string */
    public $cbinary;

    /** @var string */
    public $cblob;
}

class multicolumnEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;

    /** @var int */
    public $flag1;

    /** @var string */
    public $title1;

    /** @var string */
    public $value1;

    /** @var int */
    public $flag2;

    /** @var string */
    public $title2;

    /** @var string */
    public $value2;

    /** @var int */
    public $flag3;

    /** @var string */
    public $title3;

    /** @var string */
    public $value3;

    /** @var int */
    public $flag4;

    /** @var string */
    public $title4;

    /** @var string */
    public $value4;

    /** @var int */
    public $flag5;

    /** @var string */
    public $title5;

    /** @var string */
    public $value5;
}

class multifkeyEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $mainid;

    /** @var int */
    public $subid;
}

class multifkey2Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $fcol1;

    /** @var int */
    public $fcol2;

    /** @var int */
    public $fcol9;
}

class multiprimaryEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $mainid;

    /** @var int */
    public $subid;

    /** @var string */
    public $name;
}

class multiuniqueEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $uc_s;

    /** @var int */
    public $uc_i;

    /** @var string */
    public $uc1;

    /** @var int */
    public $uc2;

    /** @var int */
    public $groupkey;
}

class noautoEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var string */
    public $id;

    /** @var string */
    public $name;
}

class noprimaryEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;
}

class notnullsEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;

    /** @var int */
    public $cint;

    /** @var float */
    public $cfloat;

    /** @var float|string */
    public $cdecimal;
}

class nullableEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;

    /** @var int */
    public $cint;

    /** @var float */
    public $cfloat;

    /** @var float|string */
    public $cdecimal;
}

class oprlogEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $category;

    /** @var int */
    public $primary_id;

    /** @var string */
    public $log_date;

    /** @var string */
    public $message;
}

class pagingEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;
}

class ArticleEntity extends \ryunosuke\Test\Entity\Article
{
    /** @var int */
    public $article_id;

    /** @var string */
    public $title;

    /** @var array|string */
    public $checks;

    /** @var string */
    public $delete_at;

    /** @var int */
    public $title2;

    /** @var int */
    public $title3;

    /** @var int */
    public $title4;

    /** @var int */
    public $title5;

    /** @var int */
    public $comment_count;

    /** @var int */
    public $vaffect;
}

class ManagedArticleEntity extends \ryunosuke\Test\Entity\Article
{
    /** @var int */
    public $article_id;

    /** @var string */
    public $title;

    /** @var array|string */
    public $checks;

    /** @var string */
    public $delete_at;

    /** @var int */
    public $title2;

    /** @var int */
    public $title3;

    /** @var int */
    public $title4;

    /** @var int */
    public $title5;

    /** @var int */
    public $comment_count;

    /** @var int */
    public $vaffect;
}

class CommentEntity extends \ryunosuke\Test\Entity\Comment
{
    /** @var int */
    public $comment_id;

    /** @var int */
    public $article_id;

    /** @var string */
    public $comment;
}

class ManagedCommentEntity extends \ryunosuke\Test\Entity\ManagedComment
{
    /** @var int */
    public $comment_id;

    /** @var int */
    public $article_id;

    /** @var string */
    public $comment;
}

class testEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name;

    /** @var string */
    public $data;
}

class test1Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name1;
}

class test2Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var string */
    public $name2;
}

class tran_table1Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $master_id;
}

class tran_table2Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $master_id;
}

class tran_table3Entity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $id;

    /** @var int */
    public $master_id;
}

class v_articleEntity extends \ryunosuke\dbml\Entity\Entity
{
    /** @var int */
    public $article_id;

    /** @var string */
    public $title;

    /** @var string */
    public $checks;

    /** @var string */
    public $delete_at;

    /** @var string */
    public $comment_count;
}
